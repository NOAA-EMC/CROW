########################################################################

# Convenient blocks to include in actions:

shared_serial_action: &shared_serial_action
  <<: [ runtime, options ]
  com: !calc {doc.runtime.com}
  prior_com: !calc {doc.runtime.prior_com}
  rocoto_memory: "2G"
  accounting:
    queue: !calc platform.serial_queue
  resources: [ { exe: placeholder } ]
  command: !calc runner.make_ShellCommand(resources)

parallel_unlimited_memory_action: &parallel_unlimited_memory_action
  <<: [ runtime, options ]
  command: !calc runner.make_ShellCommand(resources)
  accounting:
    queue: !calc platform.parallel_queue

generic_fcst: &generic_fcst_action
  <<: *&parallel_unlimited_memory_action
  dt_rand: !calc dt_rand_fcst
  dt_write: !calc dt_write_fcst
  namelist: !expand |
    &settings
      nx={nx}
      ny={ny}
      infile={tools.fort(infile)}
      outfile_format={tools.fort(outfile_format)}
      dt_write={round(tools.as_seconds(dt_write)/3600)}
      start_time={round(tools.as_seconds(start_time)/3600)}
      end_time={round(tools.as_seconds(end_time)/3600)}
      global_seed={seed}
      dt_rand={dt_rand}
    /

########################################################################

# Actual actions:

start_cycle: &start_cycle_action !Action
  <<: *shared_serial_action
  J_JOB: JSTART_CYCLE
  command: !calc runner.make_ShellCommand(resources)

clim_init: &start_cycle_action !Action
  <<: *parallel_ulimited_memory_action
  J_JOB: JCLIM_INIT
  resources:
    - exe: !calc doc.executables.climatology_init
      ranks: !calc doc.options.init_ranks
  namelist: !expand |
    &settings
      nx={nx}
      ny={ny}
      global_seed={seed}
      outfile={outfile}
    /
  outfile: "clim-init.grid"

clim_fcst: &clim_fcst_action !Action
  <<: *parallel_ulimited_memory_action
  J_JOB: JCLIM_FCST
  resources:
    - exe: !calc doc.executables.fcst
      ranks: !calc doc.options.fcst_ranks

ens_fcst: &ens_fcst_action !Action
  <<: *parallel_ulimited_memory_action
  J_JOB: JENS_FCST
  resources:
    - exe: !calc doc.executables.fcst
      ranks: !calc doc.options.ens_ranks

  member_id: null
  dt_write: !calc doc.options.cycle_len
  start_time: !calc doc.clock.now-doc.clock.start
  end_time: !calc doc.clock.next(1)-doc.clock.start
  infile: !expand "{prior_com}/analysis.grid"
  seed: !calc doc.options.seed + member_id
  cyc_len_int: !calc round(tools.as_seconds(doc.options.cycle_len)/3600)
  ens_result: !expand "output_{cyc_len_int:06d}.grid"
  outfile_format: "output_######.grid"

fcst: &fcst_action !Action
  <<: *parallel_ulimited_memory_action
  J_JOB: JFCST
  resources:
    - exe: !calc doc.executables.fcst
      ranks: !calc doc.options.fcst_ranks

post: &post_action !Action
  <<: *parallel_ulimited_memory_action
  J_JOB: JPOST
  resources:
    - exe: !calc doc.executables.post
      ranks: !calc doc.options.fcst_ranks

  namelist: !expand |
    &settings
      nx = {nx}
      ny = {ny}
      infile = {tools.fort(infile)}
    /

  # fhr will be replaced at runtime
  fhr: null

  # Input file to the post job.  Note that it is calculated from the
  # fhr, so it will change at runtime.
  infile: !expand fcst_{fhr:06d}.grid

  # File wait settings for expost.sh.  Units are bytes and seconds:
  min_size: !calc "nx*ny*4 + 8"
  min_age: 20
  sleep_wait: 30
  max_wait: 300

analysis: &analysis_action !Action
  <<: *parallel_ulimited_memory_action
  J_JOB: JANALYSIS
  resources:
    - exe: !calc doc.executables.analysis
      ranks: !calc doc.options.fcst_ranks
  member_input: member_%06d.grid
  fcst_len_int: !calc round(tools.as_seconds(fcst_len)/3600)
  guess_in: !expand "{prior_com}/fcst_{fcst_len_int:06d}.grid"
  namelist: !expand |
    &settings
      nx = {nx}
      ny = {ny}
      members = {ens_members}
      analysis_out = "analysis.grid"
      ensemble_format = "member_######.grid"
      guess_in = {tools.fort(guess_in)}
    /
