Assuming:
 *  24 physical cores per node
 *  2 logical cpus per core when hyperthreading is enabled
 *  hyperthreading is disabled by default

There are two aspects to this:

1. Write a sysenv.parallelism.(module).Parallelism class for aprun
2. Write a sysenv.scheduler.(module).Scheduler class for LSF + ALPS

Aprun documentation:

  https://bluewaters.ncsa.illinois.edu/using-aprun

Produtil's equivalent to sysenv.parallelism.(module).Parallelism:

  /scratch3/NCEPDEV/hwrf/save/Samuel.Trahan/H216O-quasitag/ush/produtil/mpi_impl/lsf_cray_intel.py


Examples:


[ { exe='yup' } ]
aprun -n 1 -N 1 -d 1 -j 1 -cc depth yup
<nodes>1</nodes>


[ { exe='blah', mpi_ranks=24 } ]
becomes:
aprun -n 24 -N 24 -d 1 -j 1 -cc depth blah
<nodes>1</nodes>


[ { exe="flur", mpi_ranks=12 },
  { exe='zhod', mpi_ranks=12 } ]
becomes:
aprun -n 12 -N 12 -d 1 -j 1 -cc depth flur \
    : -n 12 -N 12 -d 1 -j 1 -cc depth zhod
<nodes>2</nodes>



[ { exe="flur", mpi_ranks=12, max_ppn=4 },
  { exe="flur", mpi_ranks=48 } ]
becomes:
aprun -n 12 -N 4 -d 1 -j 1 -cc depth flur \
    : -n 48 -N 24 -d 1 -j 1 -cc depth flur
<nodes>5</nodes>



[ { exe="bleh", OMP_NUM_THREADS=48, hyperthreads=2 } ]
becomes:
aprun -n 1 -N 1 -d 48 -j 2 -cc depth /usr/bin/env OMP_NUM_THREADS=48 bleh
<nodes>1</nodes>



[ { exe="bleh", OMP_NUM_THREADS=24, mpi_ranks=12 },
  { exe="bleh", OMP_NUM_THREADS=4, mpi_ranks=12 },
  { exe="bleh", OMP_NUM_THREADS=48, mpi_ranks=48, hyperthreads=2 } ]
becomes:
aprun -n 12 -N 1 -d 24 -j 1 -cc depth /usr/bin/env OMP_NUM_THREADS=24 bleh \
    : -n 12 -N 6 -d 4 -j 1  -cc depth /usr/bin/env OMP_NUM_THREADS=4 bleh \
    : -n 48 -N 1 -d 48 -j 2 -cc depth /usr/bin/env OMP_NUM_THREADS=48 bleh
<nodes>62</nodes>



Special cases needed for aprun:

[ { exe="thing", CrayAprun_cc_extra='numa_node', mpi_ranks=48 } ]
becomes:
aprun -n 48 -N 24 -d 1 -j 1 -cc numa_node thing
<nodes>2</nodes>

[ { exe="thing", CrayAprun_p_state_extra=2601000, mpi_ranks=12 } ]
becomes:
aprun -n 12 -N 12 -d 1 -j 1 -cc depth --p-state 2601000\
<nodes>1</nodes>
NOTE: We will want to add a turbo mode enabling option.  That requires
parsing this file:
    /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies
and getting the highest available frequency, which is the magic number
for turbo mode.  That can wait until later.
