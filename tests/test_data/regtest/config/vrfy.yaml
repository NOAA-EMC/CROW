# This file is used to generate config.vrfy which runs some of the
# post-processing and the VSDB.  That functionality is not included in
# this release, so this file is ignored.

config_vrfy:
  filename: config.vrfy
  content: !expand |
    #!/bin/ksh -x
    
    # This file is automatically generated from the YAML-based system
    # in ecf/ecfutils/.  Any changes will be overwritten if
    # setup_case.sh is rerun.
    
    ########## config.vrfy ##########
    # Verification step specific
    
    echo "BEGIN: config.vrfy"
    
    # Get task specific resources
    . $EXPDIR/config.resources vrfy
    
    export VDUMP="{doc.downstream.VDUMP}"       # verifying dump
    export CDUMPFCST="{doc.downstream.CDUMPFCST}"  # Fit-to-obs with GDAS/GFS prepbufr
    export CDFNL="{doc.downstream.CDFNL}"      # Scores verification against GDAS/GFS analysis
    
    export MKPGB4PRCP="{tools.YES_NO(doc.downstream.MKPGB4PRCP)}"  # make 0.25-deg pgb files in ARCDIR for precip verification
    export VRFYFITS="{tools.YES_NO(doc.downstream.VRFYFITS)}"    # Fit to observations
    export VSDB_STEP1="{tools.YES_NO(doc.downstream.VSDB_STEP1)}"  # populate VSDB database
    export VSDB_STEP2="{tools.YES_NO(doc.downstream.VSDB_STEP2)}"
    export VRFYG2OBS="{tools.YES_NO(doc.downstream.VRFYG2OBS)}"   # Grid to observations, see note below if turning ON
    export VRFYPRCP="{tools.YES_NO(doc.downstream.VRFYPRCP)}"    # Precip threat scores
    export VRFYRAD="{tools.YES_NO(doc.downstream.VRFYRAD)}"     # Radiance data assimilation monitoring
    export VRFYOZN="{tools.YES_NO(doc.downstream.VRFYOZN)}"     # Ozone data assimilation monitoring
    export VRFYMINMON="{tools.YES_NO(doc.downstream.VRFYMINMON)}"  # GSI minimization monitoring
    export VRFYTRAK="{tools.YES_NO(doc.downstream.VRFYTRAK)}"    # Hurricane track verification
    export VRFYGENESIS="{tools.YES_NO(doc.downstream.VRFYGENESIS)}" # Cyclone genesis verification
    export RUNMOS="{tools.YES_NO(doc.downstream.RUNMOS)}"      # whether to run entire MOS package
    
    #-------------------------------------------------
    # Fit to Observations
    #-------------------------------------------------
    
    if [ $VRFYFITS = "YES" ]; then
    
        export PRVT=$HOMEgfs/fix/fix_gsi/prepobs_errtable.global
        export HYBLEVS=$HOMEgfs/fix/fix_am/global_hyblev.l65.txt
        export CUE2RUN=$QUEUE
    
        if [ $machine = "WCOSS_C" ]; then
            export fitdir="$BASE_SVN/verif/global/parafits.fv3nems/batrun"
            export PREPQFITSH="$fitdir/subfits_cray_nems"
        elif [ $machine = "WCOSS_DELL_P3" ]; then
            export fitdir="$BASE_SVN/verif/global/parafits.fv3nems/batrun"
            export PREPQFITSH="$fitdir/subfits_dell_nems"
        elif [ $machine = "THEIA" ]; then
            export fitdir="$BASE_SVN/verif/global/parafits.fv3nems/batrun"
            export PREPQFITSH="$fitdir/subfits_theia_nems"
        elif [ $machine = "JET" ]; then
            export fitdir="$BASE_GIT/verif/global/parafits.fv3nems.dell/batrun"
            export PREPQFITSH="$fitdir/subfits_jet_nems"
        fi
    
    fi
    
    
    #----------------------------------------------------------
    # VSDB STEP1, Verify Precipipation and Grid To Obs options
    #----------------------------------------------------------
    # All these call $VSDBSH
    
    if [[ "$CDUMP" = "gfs" ]] ; then
        ddd=`echo $CDATE |cut -c 1-8`
        #if [ $ddd -eq 5 -o $ddd -eq 10 ]; then export VSDB_STEP2 = "YES" ;fi
    
        if [ $VSDB_STEP1 = "YES" -o $VSDB_STEP2 = "YES" -o $VRFYPRCP = "YES" -o $VRFYG2OBS = "YES" ]; then
            export BACKDATEVSDB=24                          # execute vsdbjob for the previous day
            export VBACKUP_PRCP=24                          # back up for QPF verification data
            export vsdbsave="$NOSCRUB/archive/vsdb_data"    # place to save vsdb database
            export vsdbhome=$BASE_VERIF                     # location of global verification scripts
            export VSDBSH="$vsdbhome/vsdbjob.sh"            # VSDB job script
            export vlength=$FHMAX_GFS                       # verification length
            export vhr_rain=$FHMAX_GFS                      # verification length for precip
            export ftyplist="pgbq"                          # verif. files used for computing QPF ETS scores
            export ptyplist="PRATE"                         # precip types in GRIB: PRATE or APCP
            export anltype="gfs"                            # default=gfs, analysis type (gfs or gdas) for verification
            export rain_bucket=6                            # prate in pgb files is 6-hr accumulated
    
            export VSDB_START_DATE="$SDATE"                 # starting date for vsdb maps
            export webhost="emcrzdm.ncep.noaa.gov"          # webhost(rzdm) computer
            export webhostid="$USER"                        # webhost(rzdm) user name
            export SEND2WEB="NO"                            # whether or not to send maps to webhost
            export WEBDIR="/home/people/emc/www/htdocs/gmb/${{webhostid}}/vsdb/$PSLOT"
            export mdlist="gfs $PSLOT "                     # exps (up to 10) to compare in maps
        fi
    fi
    
    
    #----------------------------------------------------------
    # Minimization, Radiance and Ozone Monitoring
    #----------------------------------------------------------
    
    if [ $VRFYRAD = "YES" -o $VRFYMINMON = "YES" -o $VRFYOZN = "YES" ]; then
    
        export envir="para"
    
        # Radiance Monitoring
        if [[ "$VRFYRAD" == "YES" && "$CDUMP" == "$CDFNL" ]] ; then
    
            export RADMON_SUFFIX=$PSLOT
            export TANKverf="$NOSCRUB/monitor/radmon"
            if [ $machine = "WCOSS_C" -o $machine = "WCOSS_DELL_P3" -o $machine = "THEIA" -o $machine = "JET" ]; then
                export VRFYRADSH="$HOMEgfs/jobs/JGDAS_VERFRAD"
            else
                echo "WARNING: Radiance monitoring is not enabled on $machine!"
                export VRFYRAD="NO"
            fi
    
        fi
    
        # Minimization Monitoring
        if [[ "$VRFYMINMON" = "YES" ]] ; then
    
            export MINMON_SUFFIX=$PSLOT
            export M_TANKverf="$NOSCRUB/monitor/minmon"
            if [ $machine = "WCOSS_C" -o $machine = "WCOSS_DELL_P3" -o $machine = "THEIA" -o $machine = "JET" ]] ; then
                if [[ "$CDUMP" = "gdas" ]] ; then
                    export VRFYMINSH="$HOMEgfs/jobs/JGDAS_VMINMON"
                elif [[ "$CDUMP" = "gfs" ]] ; then
                    export VRFYMINSH="$HOMEgfs/jobs/JGFS_VMINMON"
                fi
            else
                echo "WARNING: Minimization monitoring is not enabled on $machine!"
                export VRFYMINMON="NO"
            fi
    
        fi
    
        # Ozone Monitoring
        if [[ "$VRFYOZN" == "YES" && "$CDUMP" == "$CDFNL" ]] ; then
    
            export HOMEgfs_ozn="$HOMEgfs"
            export OZNMON_SUFFIX=$PSLOT
            export TANKverf_ozn="$NOSCRUB/monitor/oznmon"
            if [ $machine = "WCOSS_C" -o $machine = "WCOSS_DELL_P3" -o $machine = "THEIA" -o $machine = "JET" ]; then
                export VRFYOZNSH="$HOMEgfs/jobs/JGDAS_VERFOZN"
            else
                echo "WARNING: Ozone monitoring is not enabled on $machine!"
                export VRFYOZN="NO"
            fi
    
        fi
    
    fi
    
    
    #-------------------------------------------------
    # Cyclone genesis and cyclone track verification
    #-------------------------------------------------
    
    if [ $machine = "WCOSS_C" ] ; then
        export ens_tracker_ver=v1.1.13.1
        export HOMEens_tracker=/gpfs/hps3/emc/global/noscrub/emc.glopara/git/ens_tracker.${{ens_tracker_ver}}
    elif [ $machine = "WCOSS_DELL_P3" ] ; then
        export ens_tracker_ver=v1.1.13.1
        export HOMEens_tracker=/gpfs/dell2/emc/modeling/noscrub/emc.glopara/git/ens_tracker.${{ens_tracker_ver}}
    elif [ $machine = "THEIA" ] ; then
        export ens_tracker_ver=v2.0.1
        export HOMEens_tracker=/scratch4/NCEPDEV/global/save/glopara/svn/gfs/branches/gfs_q3fy17/ens_tracker.${{ens_tracker_ver}}
    elif [ $machine = "JET" ]; then
        export ens_tracker_ver=v1.1.13.2
        export HOMEens_tracker=/mnt/lfs3/projects/hfv3gfs/glopara/git/tracker/ens_tracker.${{ens_tracker_ver}}
    else
        echo "WARNING: Genesis and cyclone verifications are not enabled on $machine!"
        export VRFYGENESIS="NO"
        export VRFYTRAK="NO"
    fi
    
    
    if [ "$VRFYTRAK" = "YES" ]; then
    
        export TRACKERSH="$HOMEgfs/jobs/JGFS_CYCLONE_TRACKER"
        if [ $CDUMP = "gdas" ]; then
            export FHOUT_CYCLONE={doc.downstream.FHOUT_CYCLONE_GDAS}
            export FHMAX_CYCLONE=$FHMAX
        else
            export FHOUT_CYCLONE={doc.downstream.FHOUT_CYCLONE_GFS}
            export FHMAX_CYCLONE=$(( FHMAX_GFS<240 ? FHMAX_GFS : 240 ))
        fi
        if [ $machine = "THEIA" ]; then
           export COMROOTp1="/scratch4/NCEPDEV/rstprod/com"
           export COMINsyn="$COMROOTp1/arch/prod/syndat"
        elif [ $machine = "JET" ]; then
           export TRACKERSH="$HOMEens_tracker/jobs/JGFS_CYCLONE_TRACKER"
           export COMINsyn="/mnt/lfs3/projects/hwrf-data/hwrf-input/SYNDAT"
        fi
    fi
    
    
    if [[ "$VRFYGENESIS" == "YES" && "$CDUMP" == "gfs" ]]; then
    
        if [ $machine = "WCOSS_C" -o $machine = "WCOSS_DELL_P3" ] ; then
            export GENESISSH="$HOMEgfs/jobs/JGFS_CYCLONE_GENESIS"
        elif [ $machine = "THEIA" ] ; then
            export GENESISSH="$HOMEens_tracker/gfs_genesis_para_fv3gfs.sh"	
            export UTILROOT="/scratch4/NCEPDEV/global/save/glopara/nwpara/prod_util.v1.0.15"
            export GETTX_GEN="$NWROOTGENESIS/ens_tracker.v2.0.1/exec/gettrk_gen_g2_theia"
        elif [ $machine = "JET" ] ; then
            export GENESISSH="$HOMEens_tracker/jobs/JGFS_CYCLONE_GENESIS"
            export UTILROOT="/lfs3/projects/hwrf-vd/soft/prod_util-1.0.18"
            export GETTX_GEN="$HOMEens_tracker/exec/gettrk_gen_g2"
        else
            echo "WARNING: Genesis verification is not enabled on $machine!"
            export VRFYGENESIS="NO"
            export GENESISSH=""
        fi
    fi
    
    if [[ "$RUNMOS" == "YES" && "$CDUMP" == "gfs" ]]; then

        if [ $machine = "WCOSS_C" ] ; then
            export RUNGFSMOSSH="$HOMEgfs/scripts/run_gfsmos_master.sh.cray"
        elif [ $machine = "WCOSS_DELL_P3" ] ; then
            export RUNGFSMOSSH="$HOMEgfs/scripts/run_gfsmos_master.sh.dell"
        else
            echo "WARNING: MOS package is not enabled on $machine!"
            export RUNMOS="NO"
            export RUNGFSMOSSH=""
        fi
    fi

    echo "END: config.vrfy"
    
